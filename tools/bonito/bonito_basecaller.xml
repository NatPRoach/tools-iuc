<?xml version="1.0"?>
<tool id="bonito_basecaller" name="bonito basecalling tool" version="@TOOL_VERSION@+galaxy0" profile="@PROFILE@">
    <description>Pytorch based basecalling for Oxford Nanopore Technologies data</description>
    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="version_command"/>

    <command detect_errors="exit_code"><![CDATA[
#if '$align_reads' == "Yes":
    #if $reference_source.reference_source_selector == 'history':
        ln -f -s '$align_reads.reference_source.ref_file' reference.fa &&
    #else:
        ln -f -s '$align_reads.reference_source.ref_file.fields.path' reference.fa &&
    #end if
#end if

@INITIALIZE@

## run
bonito basecaller
#if '$align_reads' == "Yes":
    --reference '$align_reads.reference'
    ./data
    #if '$reads_ids':
        --reads-ids '$reads_ids'
    #end if
    #if '$device':
        --device '$device'
    #end if
    #if '$weights':
        --weights '$weights'
    #end if
    #if '$skip':
        --skip
    #end if
    #if '$output_format' == "fastq":
        --fastq
    #end if
    
#elif '$align_reads_selector' == "No":

#end if 
    ]]></command>
    <inputs>
        <expand macro="reference"/>
        <param argument="--regions" type="text" value="" optional="true" label="Set reference names to limit variant calling" help="Separated by ','.">
            <sanitizer invalid_char="">
                <valid initial="string.ascii_letters,string.digits">
                    <add value="_"/>
                    <add value=","/>
                    <add value="."/>
                </valid>
            </sanitizer>
        </param>
        <param argument="--verbose" type="boolean" truevalue="--verbose" falsevalue="" label="Populate VCF info fields?"/>
        <conditional name="output_annotated">
            <param name="output_annotated_select" type="select" label="Output annotated VCF?" help="Annotate allele frequency, depth of coverage, etc for each variant (requires BAM file)">
                <option value="true" selected="true">Output annotated VCF</option>
                <option value="false">Don't output annotated VCF</option>
            </param>
            <when value="true">
                <param name="in_bam" type="data" format="bam" optional="false" label="BAM to annotate the VCF" />
                <param name="min_basequal" type="integer" value="0" min="0" max="50" label="Minimum base quality" help="The minimum base quality (default: 0) at a given variant position required to include a read in the calculation of variant statistics (samtools mpileup -Q)" />
                <param name="min_mapqual" type="integer" value="0" min="0" max="60" label="Minimum mapping quality" help="The minimum mapping quality (default: 0) required for a read to be considered in calculation of variant statistics (samtools mpileup -q)" />
            </when>
            <when value="false"/>
        </conditional>
        <param name="output_log_bool" type="boolean" label="Output log file?" checked="true"/>
    </inputs>
    <outputs>
        <!-- standard -->
        <data name="out_result" format="vcf" label="${tool.name} on ${on_string}: Result"/>
        <!-- optional -->
        <data name="out_annotated" format="vcf" label="${tool.name} on ${on_string}: Annotated">
            <filter>output_annotated_select</filter>
        </data>
        <data name="out_log" format="tabular" label="${tool.name} on ${on_string}: Log">
            <filter>output_log_bool</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="3">
            <conditional name="pool">
                <param name="pool_mode" value="Yes"/>
                <param name="inputs" value="medaka_test.hdf,medaka_test.hdf"/>
            </conditional>
            <conditional name="reference_source">
                <param name="reference_source_selector" value="history"/>
                <param name="ref_file" value="ref.fasta"/>
            </conditional>
            <conditional name="output_annotated">
                <param name="output_annotated_select" value="true"/>
                <param name="in_bam" value="medaka_test.bam"/>
            </conditional>
            <param name="output_log_bool" value="true"/>
            
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="9"/>
                    <has_line line="##fileformat=VCFv4.1" />
                    <has_line line="##medaka_version=1.0.3" />
                </assert_contents>
            </output>
            <output name="out_annotated">
                <assert_contents>
                    <has_n_lines n="16"/>
                    <has_line line="##fileformat=VCFv4.1" />
                    <has_line line="##medaka_version=1.0.3" />
                    <has_line line="##annotateVCFVersion=0.2" />
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_n_lines n="10" />
                </assert_contents>
            </output>
        </test>
        <!--No pooling-->
        <test expect_num_outputs="3">
            <conditional name="pool">
                <param name="pool_mode" value="No"/>
                <param name="input" value="medaka_test.hdf"/>
            </conditional>
            <conditional name="reference_source">
                <param name="reference_source_selector" value="history"/>
                <param name="ref_file" value="ref.fasta"/>
            </conditional>
            <conditional name="output_annotated">
                <param name="output_annotated_select" value="true"/>
                <param name="in_bam" value="medaka_test.bam"/>
            </conditional>
            <param name="output_log_bool" value="true"/>
            
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="9"/>
                    <has_line line="##fileformat=VCFv4.1" />
                    <has_line line="##medaka_version=1.0.3" />
                </assert_contents>
            </output>
            <output name="out_annotated">
                <assert_contents>
                    <has_n_lines n="16"/>
                    <has_line line="##fileformat=VCFv4.1" />
                    <has_line line="##medaka_version=1.0.3" />
                    <has_line line="##annotateVCFVersion=0.2" />
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_n_lines n="8" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

The module *variant* decodes probabilities.

**Input**

- reference sequence (FASTA)
- (several) consensus files (H5/HDF)

**Output**

- decoded probabilities (VCF)

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>
