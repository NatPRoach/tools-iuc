<?xml version="1.0"?>
<tool id="raven" name="Raven" version="@TOOL_VERSION@+galaxy0" profile="@PROFILE@">
    <description>De novo assembly of Oxford Nanopore Technologies data</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    
    <expand macro="requirements"/>

    <expand macro="version_command"/>

<!--TODO in future version : enable CUDA support for racon polishing-->

    <command detect_errors="exit_code"><![CDATA[
#if $input_reads.is_of_type("fasta")
    ln -s '$input_reads' ./input.fa &&
    #set input = "input.fa"
#elif $input_reads.is_of_type("fasta.gz")
    ln -s '$input_reads' ./input.fa.gz &&
    #set input = "input.fa.gz"
#elif $input_reads.is_of_type("fastq")
    ln -s '$input_reads' ./input.fq &&
    #set input = "input.fq"
#elif $input_reads.is_of_type("fastq.gz")
    ln -s '$input_reads' ./input.fq.gz &&
    #set input = "input.fq.gz"
#end if
raven 
#if $weaken:
    --weaken
#end if
--polishing-rounds '$polishing_rounds'
--match '$match'
--mismatch '$mismatch'
--gap '$gap'
#if $graphical_fragment_assembly:
    --graphical-fragment-assembly '$out_gfa'
#end if
--disable-checkpoints
-t \${GALAXY_SLOTS:-4}
'$input'
> '$out_fasta'
    ]]></command>
    <inputs>
        <param name="input_reads" type="data" format="fasta,fastq,fasta.gz,fastq.gz"/>
        <param argument="--weaken" type="boolean" label="use larger (k, w); (for use in assembling highly accurate sequences)" checked="false"/>
        <param argument="--polishing-rounds" type="integer" value="2" min="0" label="Number of times racon polishing is invoked"/>
        <param argument="--match" type="integer" value="3"/>
        <param argument="--mismatch" type="integer" value="-5"/>
        <param argument="--gap" type="integer" value="-4" max="-1"/>
        <param argument="--graphical-fragment-assembly" type="boolean" label="output graphical fragment assembly file?" checked="true"/>
    </inputs>
    <outputs>
        <data name="out_gfa" format="gfa1" label="${tool.name} on ${on_string} (Graphical Fragment Assembly)">
            <filter>graphical_fragment_assembly</filter>
        </data>
        <data name="out_fasta" format="fasta" label="${tool.name} on ${on_string} (FASTA)" />
    </outputs>
    <tests>
        <test>
            <param name="input_reads" ftype="fastq.gz" value="ERA476754.fastq.gz"/>
            <output name="out_gfa" file="raven_gfa_assembly.txt">
                <assert_contents>
                    <has_n_lines n="1"/>
                </assert_contents>
            </output>
            <output name="out_fasta" file="raven_assembly.fasta">
                <assert_contents>
                    <has_n_lines n="2"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

**Input**
- fasta / fastq / fasta.gz / fastq.gz data

**Output**

- Assembled genome (FASTA)
- Graphical fragment assembly (optional) (.txt)

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>
